# 工作流名称
name: Deploy to GitHub Releases

# 触发条件
on:
  # 手动触发
  workflow_dispatch:
  # 推送代码到仓库时触发
  push:
    branches:
      - main  # 指定触发工作流的分支，例如 main 或其他分支

# 设置 GITHUB_TOKEN 的权限，允许部署到 GitHub Releases
permissions:
  contents: read
  releases: write

# 并发控制
# 同一时间只允许一个部署作业运行，跳过在运行中的作业和最新排队的作业之间的排队作业。
# 但是，不要取消正在进行的作业，因为我们希望允许这些生产部署完成。
concurrency:
  group: "releases"
  cancel-in-progress: false

# 定义部署作业
jobs:
  deploy:
    # 环境信息
    environment:
      name: github-releases
      url: ${{ steps.create_release.outputs.html_url }}
    # 指定作业运行的环境
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 构建项目
      - name: Build
        run: |
          # 在这里添加你的构建命令
          echo "构建项目..."

      # 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 发布的标签名称
          tag_name: ${{ github.ref }}
          # 发布的名称
          release_name: Release ${{ github.ref }}
          # 发布的描述
          body: |
            这是发布的内容描述。
            可以在这里添加更多详细信息。
          # 是否为预发布版本
          draft: false
          # 是否为发布版本
          prerelease: false

      # 上传构建产物到 Release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 发布的 ID
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # 构建产物的路径
          asset_path: ./path/to/your/build/artifact.zip
          # 构建产物的名称
          asset_name: artifact.zip
          # 构建产物的 MIME 类型
          asset_content_type: application/zip
